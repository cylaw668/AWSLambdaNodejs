Console Output
Started by user Chrisotopher Law
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/jenkins_home/workspace/SimpleApiAws
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Tool Install)
[Pipeline] tool
[Pipeline] envVarsForTool
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Git Checkout)
[Pipeline] tool
[Pipeline] envVarsForTool
[Pipeline] withEnv
[Pipeline] {
[Pipeline] git
The recommended git tool is: NONE
using credential Git123
 > git rev-parse --resolve-git-dir /var/jenkins_home/workspace/SimpleApiAws/.git # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/cylaw668/AWSLambdaNodejs.git # timeout=10
Fetching upstream changes from https://github.com/cylaw668/AWSLambdaNodejs.git
 > git --version # timeout=10
 > git --version # 'git version 2.17.1'
using GIT_ASKPASS to set credentials 
 > git fetch --tags --progress -- https://github.com/cylaw668/AWSLambdaNodejs.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
Checking out Revision a7d39c373dd66e7c44c852ba64f415ed38f37166 (refs/remotes/origin/main)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f a7d39c373dd66e7c44c852ba64f415ed38f37166 # timeout=10
 > git branch -a -v --no-abbrev # timeout=10
 > git branch -D main # timeout=10
 > git checkout -b main a7d39c373dd66e7c44c852ba64f415ed38f37166 # timeout=10
Commit message: "Add API Gateway"
 > git rev-list --no-walk a7d39c373dd66e7c44c852ba64f415ed38f37166 # timeout=10
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Terraform Init)
[Pipeline] tool
[Pipeline] envVarsForTool
[Pipeline] withEnv
[Pipeline] {
[Pipeline] sh
+ terraform init

[0m[1mInitializing the backend...[0m

[0m[1mInitializing provider plugins...[0m
- Reusing previous version of hashicorp/aws from the dependency lock file
- Reusing previous version of hashicorp/archive from the dependency lock file
- Installing hashicorp/aws v3.69.0...
- Installed hashicorp/aws v3.69.0 (self-signed, key ID [0m[1m34365D9472D7468F[0m[0m)
- Installing hashicorp/archive v2.2.0...
- Installed hashicorp/archive v2.2.0 (self-signed, key ID [0m[1m34365D9472D7468F[0m[0m)

Partner and community providers are signed by their developers.
If you'd like to know more about provider signing, you can read about it here:
https://www.terraform.io/docs/plugins/signing.html

[33m
[1m[33mWarning: [0m[0m[1mInterpolation-only expressions are deprecated[0m

[0m  on Lambda.tf line 8, in data "archive_file" "TestApi":
   8:   output_path = [4m"${local.lambda_zip_Location}"[0m
[0m
Terraform 0.11 and earlier required all non-constant expressions to be
provided via interpolation syntax, but this pattern is now deprecated. To
silence this warning, remove the "${ sequence from the start and the }"
sequence from the end of this expression, leaving just the inner expression.

Template interpolation syntax is still used to construct strings from
expressions when the template includes multiple interpolation sequences or a
mixture of literal strings and interpolations. This deprecation applies only
to templates that consist entirely of a single interpolation sequence.

(and one more similar warning elsewhere)
[0m[0m
[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Terraform Apply)
[Pipeline] tool
[Pipeline] envVarsForTool
[Pipeline] withEnv
[Pipeline] {
[Pipeline] sh
+ terraform apply --auto-approve
[0m[1maws_api_gateway_rest_api.simple_api: Refreshing state... [id=hb5cemcek6][0m
[0m[1maws_api_gateway_resource.resource: Refreshing state... [id=1jodo5][0m
[0m[1maws_api_gateway_method.method: Refreshing state... [id=agm-hb5cemcek6-1jodo5-GET][0m
[0m[1maws_lambda_function.test_lambda: Creating...[0m[0m
[0m[1maws_lambda_function.test_lambda: Creation complete after 6s [id=TestApi][0m[0m
[0m[1maws_lambda_permission.apigw_lambda: Creating...[0m[0m
[0m[1maws_api_gateway_integration.integration: Creating...[0m[0m
[0m[1maws_lambda_permission.apigw_lambda: Creation complete after 1s [id=AllowExecutionFromAPIGateway][0m[0m
[0m[1maws_api_gateway_integration.integration: Creation complete after 1s [id=agi-hb5cemcek6-1jodo5-GET][0m[0m
[33m
[1m[33mWarning: [0m[0m[1mInterpolation-only expressions are deprecated[0m

[0m  on Lambda.tf line 8, in data "archive_file" "TestApi":
   8:   output_path = [4m"${local.lambda_zip_Location}"[0m
[0m
Terraform 0.11 and earlier required all non-constant expressions to be
provided via interpolation syntax, but this pattern is now deprecated. To
silence this warning, remove the "${ sequence from the start and the }"
sequence from the end of this expression, leaving just the inner expression.

Template interpolation syntax is still used to construct strings from
expressions when the template includes multiple interpolation sequences or a
mixture of literal strings and interpolations. This deprecation applies only
to templates that consist entirely of a single interpolation sequence.

(and one more similar warning elsewhere)
[0m[0m
[0m[1m[32m
Apply complete! Resources: 3 added, 0 changed, 0 destroyed.[0m
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS